O Tomcat é puramente Java enquanto Apache HTTP é escrito em C. Além disso, o Apache HTTP é um servidor estático (por padrão pelo menos) e precisa de alguma integração com outra linguagem para se gerar HTML dinamicamente. O Tomcat já é dinâmico de cara, usando Java e JSP, claro!
existe um arquivo .xml para cada especificação...
Servlet é um objeto especial armazenado dentro do projeto, e sua particularidade consiste na possibilidade de o chamarmos via protocolo HTTP.

No mundo HTTP existem duas formas de devolver uma resposta: a primeira é definir um fluxo binário para, por exemplo, gerar um relatório, arquivo em PDF ou gráfico e devolver essa imagem. Para este caso, utilizaríamos o método getOutPutStream()

A segunda alternativa é utilizar o método getWriter() para devolver um conteúdo HTML.

Apache Tomcat ou apenas Tomcat é um servidor web em Java
Tomcat entende o protocolo HTTP e roda por padrão no http://localhost:8080
O projeto Java faz parte da URL, no nosso caso: http://localhost:8080/gerenciador
Uma aplicação web Java pode ter páginas HTML
Uma servlet é um objeto Java que podemos chamar a partir de uma requisição HTTP
Para mapear a URL para uma servlet usamos a anotação @WebServlet
Uma servlet deve estender a classe HttpServlet e sobrescrever um determinado método (por exemplo service)

Alternativa correta! O método req.getParameter(..) sempre retorna uma string e recebe como parâmetro o nome do parâmetro recebido na requisição.

https://cursos.alura.com.br/search?query=java

JSP é uma tecnologia que renderiza as páginas no servidor antes de enviá-la.


Alternativa correta! Todo o código (scriptlet) é executado no servidor antes de enviar a resposta para o navegador.

<% String msg = "Bem-vindo"; System.out.println(msg); %>

para exibir Bem-vindo, deveria usar o out.println("Bem-vindo"); o System.out.println(msg); irá imprimir no Console do eclipse.

JSTL (Java Standard Tag Library)

core - controle de fluxo

fmt - formatação / i18n (internacionalização)

sql - executar SQL

xml - gerar XML

core - controle de fluxo <%@ taglib uri = "http://java.sun.com/jsp/jstl/core" prefix = "c"%>


Portanto, iremos continuar lançando exceções nesta parte do código, e criaremos um objeto do tipo ServletException. Para não perdermos de vista o problema original da exceção, adicionaremos e em ServletException, isto é, a exceção original.
Esse padrão é conhecido por catch and rethrow, isto é, capturar e relançar a exceção. É exatamente isso que estamos fazendo.
fmt - formatação/i18n (internacionalização) <%@ taglib uri = "http://java.sun.com/jsp/jstl/fmt" prefix = "fmt"%>

A diferença está entre redirecionar o cliente para uma página (sendRedirect) e encaminhar uma requisição para ser atendida por outro recurso (forward).

No primeiro caso (sendRedirect), o cliente receberá uma resposta http cujo header haverá a informação de que ele deve requisitar outra página, e o browser fará esta requisição. Ou seja, o redirecionamento ocorre no lado no cliente.

No segundo caso (forward), no lado do server a requisição do usuário será encaminhada para ser atendida por outro recurso (outro servlet). Este outro servlet eventualmente devolverá outra página para o usuário.

A diferença é bem grande principalmente no que tange à experiência do usuário.

Esse é o arquivo que armazena configurações relacionadas ao mundo de Servlets, então estudaremos, rapidamente, algumas configurações que podem ser feitas nele. Ao abrirmos o arquivo web.xml, teremos acesso às configurações geradas automaticamente.

Servlet é um objeto que pode ser acionado por meio de uma requisição do protocolo HTTP. Essa interação é possibilitada pelo Tomcat, e precisa seguir algumas regras, como estender, sobrescrever os métodos doGet(), doPost() e service(), e fazer o mapeamento para indicar a URL.

Ou seja, o Tomcat realiza o papel intermediário entre o navegador e objeto, e por isso também é conhecido como middleware.

. Por isso o Servlet é chamado de Singleton, um escopo, que sobrevive no projeto por tempo indeterminado enquanto o Tomcat estiver no ar, sem nunca recriá-lo.

o Tomcat só instancia a servlet quando realmente ocorre uma requisição. Isso é o comportamento padrão que podemos alterar facilmente! A anotação @WebServlet possui um atributo loadOnStartup que muda esse comportamento:
Ao reiniciar o Tomcat será criado o objeto da servlet OiMundoServlet

Tentaremos agora listar as nossas empresas acessandolocalhost:8080/gerenciador/listaEmpresas/. E teremos uma mensagem de erro HTTP Status 500 - Internal Server Error, a root cause é UnsupportedClassVersionError, relacionada a class file version 54.0. Isso ocorreu porque compilamos as classes com uma versão mais recente daquela que usamos para executar o Tomcat.